#!/usr/bin/env python
#File to mimic the interface of command node, so that we dont need robot on to code and test code.

import rospy
import time
from musi_care.srv import qt_command
from qt_robot_interface.srv import * #so we can use the qt service srvs
from qt_gesture_controller.srv import * # #so we can use the service srv "gesture_play" 
from qt_motors_controller.srv import *
from std_msgs.msg import String #so we can become a publisher and publish a string to the QT node that handles tts.
from std_msgs.msg import Float64MultiArray
import ast

def perform_command(message):
    "Callback response, it is really just to help the flow of the code, also handles tts."
    if message.action_type == "tts":  #On tts req
        rospy.loginfo("Received TTS message")
        rospy.wait_for_service('/qt_robot/speech/say')
        qt_speech = rospy.ServiceProxy('/qt_robot/speech/say', speech_say) # The Service Type / class: speech_say
        qt_speech(message.action_content)
        rospy.loginfo("Finished requested TTS message")
        return True
    if message.action_type == "right_arm": #on right arm req
        rospy.loginfo("Received right_arm move")
        arm_msg = Float64MultiArray()
        right_arm_pos_pub = rospy.Publisher('/qt_robot/right_arm_position/command', Float64MultiArray, queue_size=1)
        arm_msg.data = ast.literal_eval(message.action_content)
        right_arm_pos_pub.publish(arm_msg)
        rospy.sleep(0.5)
        rospy.loginfo("Finished right_arm move")
        return True
    if message.action_type == "left_arm": #on left arm req
        rospy.loginfo("Received left_arm move")
        arm_msg = Float64MultiArray()
        left_arm_pos_pub = rospy.Publisher('/qt_robot/left_arm_position/command', Float64MultiArray, queue_size=1)
        arm_msg.data = ast.literal_eval(message.action_content)
        left_arm_pos_pub.publish(arm_msg)
        rospy.sleep(0.5)
        rospy.loginfo("Finished left_arm move")
        return True
        # -------------------- ADDED, NOT TESTED
    if message.action_type == "velocity":
        # Code that checks what setting they want changed ie: action_content = volume20 (Code could keyword search for "volume", "motorspeed" etc, then the only remaining text should be the numeric goal change ie 20, from "volume20" )
        rospy.loginfo("Received a request to change motor velocity.")
        new_vel = int(message.action_content)
        rospy.wait_for_service('/qt_robot/motors/setVelocity')
        set_vel = rospy.ServiceProxy('/qt_robot/motors/setVelocity', set_velocity)
        speed_changed = set_vel(["right_arm", "left_arm"], new_vel)
        if speed_changed:
            rospy.loginfo("Motor velocity changed successfully.")
        else:
            rospy.loginfo("Motor velocity could not be changed.")
        # ----------------------------------------
def wait_for_command():
    """main code that runs and waits for a message """
    rospy.init_node('qt_command_node')
    rospy.loginfo("QT Command Node has been launched")
    s = rospy.Service('qt_command_service', qt_command, perform_command) 
    rospy.spin() #Keep code running
    
if __name__ == "__main__":
    wait_for_command()
    
# ---------------------------- AST.LITERAL_EVAL()
# Evaluate an expression node or a string containing only a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, None and Ellipsis.

#This can be used for evaluating strings containing Python values without the need to parse the values oneself. It is not capable of evaluating arbitrarily complex expressions, for example involving operators or indexing.
