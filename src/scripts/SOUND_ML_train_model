#!/usr/bin/env python

# ------------------------------------------  SOUND PROCESSING OF RECORDED XYLOPHONE KEYS
# --------------------- IMPORT LIBRARIES

import librosa
import librosa.display
import numpy as np
from matplotlib import pyplot as plt
from glob import glob
import joblib
from sklearn.neighbors import KNeighborsClassifier
import csv

# ----------------------------- FUNCTIONS

# Display Graph for Audio file
def plot_wave(file):
    plt.xlabel("Time")
    plt.ylabel("Amplitude")
    #plt.xscale('log')
    plt.plot(file, 'g')
    plt.show()

# Create a Spectrogram
def spectrogram(note):
    note_ft = librosa.stft(note)
    note_db = librosa.amplitude_to_db(np.abs(note_ft), ref = np.max)

    img, ax = plt.subplots(figsize=(10,5))
    note_spectrogram = librosa.display.specshow(note_db, x_axis='time', y_axis='linear', ax = ax)
    ax.set_title('Spectogram', fontsize=20)
    img.colorbar(note_spectrogram, ax=ax, format=f'%0.2f')
    plt.show()


# Path for audio files used to tain Machine Learning model. (Sorted, as linux selects files in random order)
audio_files = sorted(glob('/home/ez/catkin_ws/src/tutorial_qt_motors/Keys_Recording/*.wav'))
print(audio_files)

raw_audios = []
ml_audio_data = []

for sample in audio_files:
    raw, sr = librosa.load(sample)
    raw_audios.append(raw)
    #plot_wave(raw) # Plot waveform graph
    #spectrogram(raw) # Plot Spectrogram

for uncompressed in raw_audios:
    fourier_trans = librosa.stft(uncompressed) # Short-time Fourier transform
    ft_db = librosa.amplitude_to_db(np.abs(fourier_trans), ref = np.max)
    ft_avg = np.mean(np.abs(ft_db), axis = 1)
    ml_audio_data.append(ft_avg)
    #plot_wave(ft_avg)

ml_audio_data = np.array(ml_audio_data)


#-------------------------------------------- TRAINING MACHINE LEARNING MODEL
# made a list containing each xylophoen key
# with a for loop, I am populating the list with 10 of each key label

xylophone_keys = ["A", "B", "C_First_Inv", "C_Root", "D", "E", "F", "G"]
keys_labels = []
for element in xylophone_keys:
    for x in range(10):
        keys_labels.append(element)
keys_labels = keys_labels + keys_labels + keys_labels
#print(keys_labels)
# ----------------------------------------------------------

X = ml_audio_data
y = keys_labels
print(X.shape)


model = KNeighborsClassifier(3)



X_train = np.concatenate((X[1:11,:], X[12:21,:], X[22:31,:], X[32:41,:], X[42:51,:], X[52:61,:], X[62:71,:], X[72:81,:], X[82:91,:], X[92:101,:], X[102:111,:], X[112:121,:], X[122:131,:], X[132:141,:], X[142:151,:], X[152:161,:], X[162:171,:], X[172:181,:], X[182:191,:], X[192:201,:], X[202:211,:], X[212:221,:], X[222:231,:], X[232:,:]))
X_test = np.concatenate((X[:1,:], X[11:12,:], X[21:22,:], X[31:32,:], X[41:42,:], X[51:52,:], X[61:62,:], X[71:72,:], X[81:82,:], X[91:92,:], X[101:102,:], X[111:112,:], X[121:122,:], X[131:132,:], X[141:142,:], X[151:152,:], X[161:162,:], X[171:172,:], X[181:182,:], X[191:192,:], X[201:202,:], X[211:212,:], X[221:222,:], X[231:232,:]))
y_train = np.concatenate((y[1:11], y[12:21], y[22:31], y[32:41], y[42:51], y[52:61], y[62:71], y[72:81], y[82:91], y[92:101], y[102:111], y[112:121], y[122:131], y[132:141], y[142:151], y[152:161], y[162:171], y[172:181], y[182:191], y[192:201], y[202:211], y[212:221], y[222:231], y[232:]))
y_test = np.concatenate((y[:1], y[11:12], y[21:22], y[31:32], y[41:42], y[51:52], y[61:62], y[71:72], y[81:82], y[91:92], y[101:102], y[111:112], y[121:122], y[131:132], y[141:142], y[151:152], y[161:162], y[171:172], y[181:182], y[191:192], y[201:202], y[211:212], y[221:222], y[231:232]))


'''print(y_test)
print(len(X_train))
print(len(X_test))
print(len(y_train))
print(len(y_test))'''

model.fit(X_train, y_train)
y_predict = model.predict(X_test)
score = model.score(X_test, y_test)
print("-- Accuracy:     ", score*100, '%')
for h in range(len(y_predict)):
    print(y_predict[h], y_test[h])


# --------------------  SAVING THE TRAINED MODEL
# The trained model is saved in a 'joblib file,
# and it will be later loaded in another code,

### Trained model already saved as CSV file (100%)

#ml_filename = 'KNN_Db_model' # 100%
#trained_model = joblib.dump(model, ml_filename + ".joblib", compress=0)
trained_model = joblib.dump(model, "/home/ez/catkin_ws/src/tutorial_qt_motors/src/scripts/ML_KNN_dB_Model.joblib", compress=0)

