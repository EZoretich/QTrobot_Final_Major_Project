#!/usr/bin/env python
#File to mimic the interface of command node, so that we dont need robot on to code and test code.

# TO DO --> Add time (rospy.get_time()), add velocity check

#------------------------------------------------------------------------ IMPORTS

import rospy
import time
from musi_care.srv import qt_command
#from qt_robot_interface.srv import * #so we can use the qt service srvs
#from qt_gesture_controller.srv import * # #so we can use the service srv "gesture_play" 
from qt_motors_controller.srv import *
from std_msgs.msg import String #so we can become a publisher and publish a string to the QT node that handles tts.
from std_msgs.msg import Bool
from sensor_msgs.msg import JointState
rospy.init_node('QT_Xylophone')

# ---------------------------------------------------------------------- VARIABLES

right_shoulder_pitch_pos = 0
right_shoulder_roll_pos = 0
right_elbow_roll_pos = 0
left_shoulder_pitch_pos = 0
left_shoulder_roll_pos = 0
left_elbow_roll_pos = 0

# --------------------------------------------------------------------- FUNCTIONS

# ---------- To obtain position of joints

def state_callback(msg):
    global right_shoulder_pitch_pos
    global right_shoulder_roll_pos
    global right_elbow_roll_pos
    global left_shoulder_pitch_pos
    global left_shoulder_roll_pos
    global left_elbow_roll_pos
    
    # Right Arm Joints
    right_shoulder_pitch_pos = msg.position[msg.name.index("RightShoulderPitch")]
    right_shoulder_roll_pos = msg.position[msg.name.index("RightShoulderRoll")]
    right_elbow_roll_pos = msg.position[msg.name.index("RightElbowRoll")]
    
    # Left Arm Joints
    left_shoulder_pitch_pos = msg.position[msg.name.index("LeftShoulderPitch")]
    left_shoulder_roll_pos = msg.position[msg.name.index("LeftShoulderRoll")]
    left_elbow_roll_pos = msg.position[msg.name.index("LeftElbowRoll")]
    


rospy.Subscriber('/qt_robot/joints/state', JointState, state_callback)

# ---------- To check if motors reached desired position
        
def check_pos(position, target):
    my_target = target.replace('"', "")
    my_target = my_target.replace(',', "")
    my_target = my_target.replace('[', "")
    my_target = my_target.replace(']', "")
    my_target = my_target.split()
    s_pitch, s_roll, e_roll = float(my_target[0]), float(my_target[1]), float(my_target[1])
    target_reached = False
    while not target_reached:
        target_reached = (round(s_pitch, 2) == round(position[0], 2)) and (round(s_roll, 2) == round(position[1], 2)) and (round(e_roll, 2) == round(position[2], 2))
    return True
    
# ---------- To move arms closer to the xylophone (to avoid hitting the holder with the mallets)

# ---------- To change the speed of the motors

def change_mot_speed(speed_percent):
	action_type = "velocity"
	action_content = speed_percent
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	#command_complete = command_controller(action_type, action_content, command_blocking)

	#print(command_complete)


def get_ready(arm, move_1, move_2, move_3):

	print("----- GET READY -----")
	action_type = arm
	action_content = move_1
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(1)

	print(command_complete)
	#print("----------", action_type, "----------")
	#print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [right_shoulder_pitch_pos, right_shoulder_roll_pos, right_elbow_roll_pos]
	    '''ac_list = action_content.replace('"', "")
	    ac_list = ac_list.replace(',', "")
	    ac_list = ac_list.replace('[', "")
	    ac_list = ac_list.replace(']', "")
	    print("modified: ", ac_list)
	    ac_list = ac_list.split()
	    #print(ac_list)
	    #print(type(ac_list))
	    #print(ac_list[0])
	    #print(type(ac_list[0]))'''
	    #check_pos(actual_pos,  action_content)
	    #print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [left_shoulder_pitch_pos, left_shoulder_roll_pos, left_elbow_roll_pos]
	    #print("REAL POS:	", actual_pos)
	    
	#rospy.sleep(1)
	
	# ------------------------------------------------------------------------
	action_type = arm
	action_content = move_2
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(1)
	print(command_complete)
	#print("----------", action_type, "----------")
	#print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [right_shoulder_pitch_pos, right_shoulder_roll_pos, right_elbow_roll_pos]
	    #print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [left_shoulder_pitch_pos, left_shoulder_roll_pos, left_elbow_roll_pos]
	    #print("REAL POS:	", actual_pos)
	    
	#rospy.sleep(1)
	
	# ------------------------------------------------------------------------
	action_type = arm
	action_content = move_3
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(1)
	print(command_complete)
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [right_shoulder_pitch_pos, right_shoulder_roll_pos, right_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [left_shoulder_pitch_pos, left_shoulder_roll_pos, left_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	    
	#rospy.sleep(3)

# ---------- Function to play a note (now same function for right/left arm)

def play_note(arm, key, offset):
	
	print("----- PLAY NOTE -----")
	actual_pos = [right_shoulder_pitch_pos, right_shoulder_roll_pos, right_elbow_roll_pos]
        # ---------- OFFSET
	action_type = arm
	action_content = offset
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(1)
	#check_pos(actual_pos,  action_content)
	print(command_complete)
	#print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [right_shoulder_pitch_pos, right_shoulder_roll_pos, right_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	    #print("RIGHT_S_PITCH:	", right_shoulder_pitch_pos)
	    #print("RIGHT_S_ROLL:	", right_shoulder_roll_pos)
	    #print("RIGHT_E_ROLL:	", right_elbow_roll_pos)
	else:
	    actual_pos = [left_shoulder_pitch_pos, left_shoulder_roll_pos, left_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	    #print("LEFT_S_PITCH:	", left_shoulder_pitch_pos)
	    #print("LEFT_S_ROLL:	", left_shoulder_roll_pos)
	    #print("LEFT_E_ROLL:	", left_elbow_roll_pos)
	    
	#rospy.sleep(2)
	
	# ---------- NOTE
	
	action_type = arm
	action_content = key
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(1)
	#check_pos(actual_pos,  action_content)
	print(command_complete)
	#print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [right_shoulder_pitch_pos, right_shoulder_roll_pos, right_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [left_shoulder_pitch_pos, left_shoulder_roll_pos, left_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	
	#rospy.sleep(2)
	# ---------- OFFSET 
	
	action_type = arm
	action_content = offset
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(1)
	'''ac = action_content.replace('"', "")
	ac = ac.replace(',', "")
	ac = ac.replace('[', "")
	ac = ac.replace(']', "")
	ac = ac.split()
	i = 0
	s_pitch, s_roll, e_roll = float(ac[0]), float(ac[1]), float(ac[1])
	target_reached = False
	while not target_reached:
	    target_reached = (round(s_pitch, 2) == round(actual_pos[0], 2)) and (round(s_roll, 2) == round(actual_pos[1], 2)) and (round(e_roll, 2) == round(actual_pos[2], 2))
	    command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	    i+=1'''
        
	#check_pos(actual_pos,  action_content)
	#check_pos(actual_pos, offset)
	print(command_complete)
	#print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [right_shoulder_pitch_pos, right_shoulder_roll_pos, right_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [left_shoulder_pitch_pos, left_shoulder_roll_pos, left_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	    
	#rospy.sleep(2)

# ----- home to test
def go_home(arm, pose):
	action_type = arm
	action_content = pose
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(1)
	print(command_complete)
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [right_shoulder_pitch_pos, right_shoulder_roll_pos, right_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [left_shoulder_pitch_pos, left_shoulder_roll_pos, left_elbow_roll_pos]
	    print("REAL POS:	", actual_pos)


#---------------------------------------- ANGLES READNG TO HIT KEYS

Home_r = "[43.0, -21.5, -48.900001525878906]" #[-87.0, -86.30000305175781, -7.400000095367432]
Home_l = "[-43.0, -21.5, -48.900001525878906]"

#---------------------------------------- RIGHT ARM ----------------------------------------
# ------------------- Sending right arm to 'Get Ready' position
r_pose1 = "[-56.29999923706055, -26.700000762939453, 0.6000000238418579]"
r_pose2 = "[60.599998474121094, -26.399999618530273, 0.6000000238418579]"
r_pose3 = "[33.900001525878906, -26.399999618530273, -73.5999984741211]"

# ------------------------

# ---------------------------------------- LEFT ARM ----------------------------------------
# ------------------- Sending left arm to 'Get Ready' position


l_pose1 = "[56.29999923706055, -26.700000762939453, 0.6000000238418579]"
l_pose2 = "[-60.599998474121094, -26.399999618530273, 0.6000000238418579]"
l_pose3 = "[-33.900001525878906, -26.399999618530273, -73.5999984741211]"
# ------------------------

offset_C_First_Inv = "[27.600000381469727, -51.5, -43.29999923706055]" #55
C_First_Inv = "[17.600000381469727, -51.5, -43.29999923706055]"
offset_B = "[26.299999237060547, -59.0, -42.70000076293945]" # 54
B = "[16.299999237060547, -59.0, -42.70000076293945]"
offset_A = "[25.300000190734863, -75.9000015258789, -28.0]" #46
A = "[15.300000190734863, -75.9000015258789, -28.0]"
offset_G = "[25.899999618530273, -84.4000015258789, -25.100000381469727]" #38
G = "[15.899999618530273, -84.4000015258789, -25.100000381469727]"
offset_C_ROOT = "[-34.100000381469727, -37.79999923706055, -58.29999923706055]" #62
C_ROOT = "[-24.100000381469727, -37.79999923706055, -58.29999923706055]"
offset_D = "[-34.399999618530273, -44.0, -58.29999923706055]" #58
D = "[-24.399999618530273, -44.0, -58.29999923706055]"
offset_E = "[-35.100000381469727, -52.099998474121094, -58.599998474121094]" # 53
E = "[-25.100000381469727, -52.099998474121094, -58.599998474121094]"
offset_F = "[-33.399999618530273, -66.0999984741211, -47.900001525878906] " # 43
F = "[-23.399999618530273, -66.0999984741211, -47.900001525878906] "


#--------------------------------------------------------------------------------
change_mot_speed("100") #50 # 75 #100
#get_ready("right_arm", r_pose1, r_pose2, r_pose3)
#get_ready("left_arm",  l_pose1, l_pose2, l_pose3)

# -------------------------- TESTING ACCURACY WITH DIFFERENT SPEEDS RIGHT ARM

# 25% DONE ||
#change_mot_speed("100") #50 # 75 #100

play_note("right_arm", C_First_Inv, offset_C_First_Inv)
play_note("right_arm", B, offset_B)
play_note("right_arm", A, offset_A)
play_note("right_arm", G, offset_G)

play_note("left_arm", C_ROOT, offset_C_ROOT)
play_note("left_arm", D, offset_D)
play_note("left_arm", E, offset_E)
play_note("left_arm", F, offset_F)

go_home("right_arm", Home_r)
go_home("left_arm", Home_l)

'''
# -------------------------------------------------------------
# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
change_mot_speed("25") #50 # 75 #100
get_ready("right_arm", r_pose1, r_pose2, r_pose3)
get_ready("left_arm",  l_pose1, l_pose2, l_pose3)


play_note("right_arm", C_FI, offset_C_FI)
play_note("right_arm", B, offset_B)
play_note("right_arm", A, offset_A)
play_note("right_arm", G, offset_G)
'''
# -----------------------------------------------------------

'''
for i in range(3):
    print(i, "ITERATION")
    change_mot_speed("25") #50 # 75 #100
    play_note("right_arm", C_FI, offset_C_FI)
    play_note("right_arm", B, offset_B)
    play_note("right_arm", A, offset_A)
    play_note("right_arm", G, offset_G)
'''
# -----------------------------------------------------------
'''
for i in range(3):
    print(i, "ITERATION")
    change_mot_speed("25") #50 # 75 #100
    get_ready("right_arm", r_pose1, r_pose2, r_pose3)
    get_ready("left_arm",  l_pose1, l_pose2, l_pose3)
    play_note("right_arm", C_FI, offset_C_FI)
    play_note("right_arm", B, offset_B)
    play_note("right_arm", A, offset_A)
    play_note("right_arm", G, offset_G)
'''
'''
for i in range(5):
    change_mot_speed("25") # 50 # 75 # 100
    play_note("right_arm", G, offset_G)
    
'''
'''
for i in range(5):
    change_mot_speed("25") # 50 # 75 # 100
    play_note("right_arm", A, offset_A)
'''
'''
for i in range(5):
    change_mot_speed("25") # 50 # 75 # 100
    play_note("right_arm", B, offset_B)
    
'''
'''
for i in range(5):
    change_mot_speed("25") # 50 # 75 # 100
    play_note("right_arm", C_FI, offset_C_FI)
    
'''
    
'''
change_mot_speed("25") #50 # 75 #100
play_note("right_arm", C_FI, offset_C_FI)
'''
'''
change_mot_speed("25") #50 # 75 #100
play_note("right_arm", G, offset_G)
'''
'''
change_mot_speed("25") #50 # 75 #100
play_note("right_arm", A, offset_A)
'''
'''
change_mot_speed("25") #50 # 75 #100
play_note("right_arm", B, offset_B)
'''
