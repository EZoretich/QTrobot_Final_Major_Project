#!/usr/bin/env python
#File to mimic the interface of command node, so that we dont need robot on to code and test code.

# TO DO --> Add time (rospy.get_time()), add velocity check

#------------------------------------------------------------------------ IMPORTS

import rospy
import time
from musi_care.srv import qt_command
#from qt_robot_interface.srv import * #so we can use the qt service srvs
#from qt_gesture_controller.srv import * # #so we can use the service srv "gesture_play" 
from qt_motors_controller.srv import *
from std_msgs.msg import String #so we can become a publisher and publish a string to the QT node that handles tts.
from std_msgs.msg import Bool
from sensor_msgs.msg import JointState
rospy.init_node('speak')

# ---------------------------------------------------------------------- VARIABLES

# ----- Variables for joints position
r_s_pitch_pos = 0
r_s_roll_pos = 0
r_e_roll_pos = 0
l_s_pitch_pos = 0
l_s_roll_pos = 0
l_e_roll_pos = 0

# --------------------------------------------------------------------- FUNCTIONS

# ---------- To obtain position of joints

def state_callback(msg):
    global r_s_pitch_pos
    global r_s_roll_pos
    global r_e_roll_pos
    global l_s_pitch_pos
    global l_s_roll_pos
    global l_e_roll_pos
    
    # Right Arm Joints
    r_s_pitch_pos = msg.position[msg.name.index("RightShoulderPitch")]
    r_s_roll_pos = msg.position[msg.name.index("RightShoulderRoll")]
    r_e_roll_pos = msg.position[msg.name.index("RightElbowRoll")]
    
    # Left Arm Joints
    l_s_pitch_pos = msg.position[msg.name.index("LeftShoulderPitch")]
    l_s_roll_pos = msg.position[msg.name.index("LeftShoulderRoll")]
    l_e_roll_pos = msg.position[msg.name.index("LeftElbowRoll")]
    


rospy.Subscriber('/qt_robot/joints/state', JointState, state_callback)

# ---------- To change the speed of the motors

def change_mot_speed(speed_percent):
	action_type = "velocity"
	action_content = speed_percent
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	#command_complete = command_controller(action_type, action_content, command_blocking)

	#print(command_complete)


def get_ready(arm, move_1, move_2, move_3):

	print("----- GET READY -----")
	start = rospy.get_time() # ---- Start Timing
	action_type = arm
	action_content = move_1
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(0.1)

	print(command_complete)
	finish = rospy.get_time() # ----- Stop Timing
	elapsed = round((finish - start), 3) # ----- Calculate Time Elapsed
	print(elapsed, "   Sec.")
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [r_s_pitch_pos, r_s_roll_pos, r_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [l_s_pitch_pos, l_s_roll_pos, l_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	    
	#rospy.sleep(0.1)
	
	# ------------------------------------------------------------------------
	start = rospy.get_time() # ----- Start Timing
	action_type = arm
	action_content = move_2
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(0.1)
	print(command_complete)
	finish = rospy.get_time() # ----- Stop Timing
	elapsed = round((finish - start), 3) # ----- Calculate Time Elapsed
	print(elapsed, "   Sec.")
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [r_s_pitch_pos, r_s_roll_pos, r_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [l_s_pitch_pos, l_s_roll_pos, l_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	    
	#rospy.sleep(0.1)
	
	# ------------------------------------------------------------------------
	start = rospy.get_time() # ----- Start Timing
	action_type = arm
	action_content = move_3
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(0.1)
	print(command_complete)
	finish = rospy.get_time() # ----- Stop Timing
	elapsed = round((finish - start), 3) # ----- Calculate Time Elapsed
	print(elapsed, "   Sec.")
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [r_s_pitch_pos, r_s_roll_pos, r_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [l_s_pitch_pos, l_s_roll_pos, l_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	    
	#rospy.sleep(3)

# ---------- Function to play a note (now same function for right/left arm)

def play_note(arm, key, offset):
	
	print("----- PLAY NOTE -----")
	#actual_pos = [r_s_pitch_pos, r_s_roll_pos, r_e_roll_pos]
        # ---------- OFFSET
	start = rospy.get_time() # ----- Start Timing
	action_type = arm
	action_content = offset
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(1)
	
	#check_pos(actual_pos,  action_content)
	print(command_complete)
	finish = rospy.get_time() # ----- Stop Timing
	elapsed = round((finish - start), 3) # ----- Calculate Time Elapsed
	print(elapsed, "   Sec.")
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [r_s_pitch_pos, r_s_roll_pos, r_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	    #print("RIGHT_S_PITCH:	", r_s_pitch_pos)
	    #print("RIGHT_S_ROLL:	", r_s_roll_pos)
	    #print("RIGHT_E_ROLL:	", r_e_roll_pos)
	else:
	    actual_pos = [l_s_pitch_pos, l_s_roll_pos, l_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	    #print("LEFT_S_PITCH:	", l_s_pitch_pos)
	    #print("LEFT_S_ROLL:	", l_s_roll_pos)
	    #print("LEFT_E_ROLL:	", l_e_roll_pos)
	    
	#rospy.sleep(2)
	
	# ---------- NOTE
	start = rospy.get_time() # ----- Start Timing
	action_type = arm
	action_content = key
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(0.1)
	#check_pos(actual_pos,  action_content)
	print(command_complete)
	finish = rospy.get_time() # ----- Stop Timing
	elapsed = round((finish - start), 3) # ----- Calculate Time Elapsed
	print(elapsed, "   Sec.")
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [r_s_pitch_pos, r_s_roll_pos, r_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [l_s_pitch_pos, l_s_roll_pos, l_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	
	#rospy.sleep(2)
	# ---------- OFFSET 
	start = rospy.get_time() # ----- Start Timing
	action_type = arm
	action_content = offset
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(0.1)
        
	#check_pos(actual_pos,  action_content)
	#check_pos(actual_pos, offset)
	finish = rospy.get_time() # ----- Stop Timing
	elapsed = round((finish - start), 3) # ----- Calculate Time Elapsed
	print(elapsed, "   Sec.")
	print(command_complete)
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [r_s_pitch_pos, r_s_roll_pos, r_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [l_s_pitch_pos, l_s_roll_pos, l_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	    
	#rospy.sleep(2)

# ----- home to test
def go_home(arm, pose):
	start = rospy.get_time() # ----- Start Timing
	action_type = arm
	action_content = pose
	command_blocking = False

	rospy.wait_for_service('/qt_command_service')
	command_controller = rospy.ServiceProxy('/qt_command_service', qt_command)
	command_complete = command_controller(action_type, action_content, command_blocking)
	rospy.sleep(0.1)
	print(command_complete)
	finish = rospy.get_time() # ----- Stop Timing
	elapsed = round((finish - start), 3) # ----- Calculate Time Elapsed
	print(elapsed, "   Sec.")
	print("----------", action_type, "----------")
	print("DESIRED POS:	", action_content)
	if action_type == "right_arm":
	    actual_pos = [r_s_pitch_pos, r_s_roll_pos, r_e_roll_pos]
	    print("REAL POS:	", actual_pos)
	else:
	    actual_pos = [l_s_pitch_pos, l_s_roll_pos, l_e_roll_pos]
	    print("REAL POS:	", actual_pos)


#---------------------------------------- ANGLES READNG TO HIT KEYS

Home_r = "[43.0, -21.5, -48.900001525878906]" #[-87.0, -86.30000305175781, -7.400000095367432]
Home_l = "[-43.0, -21.5, -48.900001525878906]"


#---------------------------------------- RIGHT ARM ----------------------------------------
# ------------------- Sending right arm to 'Get Ready' position

r_pose1 = "[-56.29999923706055, -26.700000762939453, 0.6000000238418579]"
r_pose2 = "[60.599998474121094, -26.399999618530273, 0.6000000238418579]"
r_pose3 = "[33.900001525878906, -26.399999618530273, -73.5999984741211]"

# ------------------------

# ---------------------------------------- LEFT ARM ----------------------------------------
# ------------------- Sending left arm to 'Get Ready' position


l_pose1 = "[56.29999923706055, -26.700000762939453, 0.6000000238418579]"
l_pose2 = "[-60.599998474121094, -26.399999618530273, 0.6000000238418579]"
l_pose3 = "[-33.900001525878906, -26.399999618530273, -73.5999984741211]"
# ------------------------


Notes = {
    'offset_C_First_Inv': '[27.600000381469727, -51.5, -43.29999923706055]',
    'C_First_Inv': '[17.600000381469727, -51.5, -43.29999923706055]',
    'offset_B': '[26.299999237060547, -59.0, -42.70000076293945]',
    'B': '[16.299999237060547, -59.0, -42.70000076293945]',
    'offset_A': '[25.300000190734863, -75.9000015258789, -28.0]',
    'A': '[15.300000190734863, -75.9000015258789, -28.0]',
    'offset_G': '[25.899999618530273, -84.4000015258789, -25.100000381469727]',
    'G': '[15.899999618530273, -84.4000015258789, -25.100000381469727]',
    'offset_C_Root': '[-34.100000381469727, -37.79999923706055, -58.29999923706055]',
    'C_Root': '[-24.100000381469727, -37.79999923706055, -58.29999923706055]',
    'offset_D': '[-34.399999618530273, -44.0, -58.29999923706055]',
    'D': '[-24.399999618530273, -44.0, -58.29999923706055]',
    'offset_E': '[-35.100000381469727, -52.099998474121094, -58.599998474121094]',
    'E': '[-25.100000381469727, -52.099998474121094, -58.599998474121094]',
    'offset_F': '[-33.399999618530273, -66.0999984741211, -47.900001525878906]',
    'F': '[-23.399999618530273, -66.0999984741211, -47.900001525878906]'
}


Row_the_Boat = {
    0.0: ['C_Root', 'offset_C_Root'],
    4.5: ['C_Root', 'offset_C_Root'],
    9.0: ['C_Root', 'offset_C_Root'],
    12.8: ['D', 'offset_D'],
    16.6: ['E', 'offset_E'],
    21.1: ['E', 'offset_E'],
    24.9: ['D', 'offset_D'],
    28.7: ['E', 'offset_E'],
    32.5: ['F', 'offset_F'],
    36.3: ['G', 'offset_G'],
    40.8: ['C_First_Inv', 'offset_C_First_Inv'],
    44.6: ['C_First_Inv', 'offset_C_First_Inv'],
    48.4: ['C_First_Inv', 'offset_C_First_Inv'],
    52.2: ['G', 'offset_G'],
    56.0: ['G', 'offset_G'],
    59.8: ['G', 'offset_G'],
    63.6: ['E', 'offset_E'],
    67.4: ['E', 'offset_E'],
    71.2: ['E', 'offset_E'],
    75.0: ['C_Root', 'offset_C_Root'],
    78.8: ['C_Root', 'offset_C_Root'],
    82.6: ['C_Root', 'offset_C_Root'],
    86.4: ['G', 'offset_G'],
    90.9: ['F', 'offset_F'],
    94.7: ['E', 'offset_E'],
    98.5: ['D', 'offset_D'],
    102.3: ['C_Root', 'offset_C_Root'],
}


# from note no note: 3.8
# SHORT = 3.8
# LONG = 4.5

Basket_Case = {
    0.0: ['G', 'offset_G'],
    4.5: ['F', 'offset_F'],
    8.3: ['E', 'offset_E'],
    12.1: ['F', 'offset_F'],
    15.9: ['G', 'offset_G'],
    20.4: ['B', 'offset_B'],
    24.2: ['C_First_Inv', 'offset_C_First_Inv'],
    28.0: ['B', 'offset_B'],
    31.8: ['A', 'offset_A'],
    35.6: ['G', 'offset_G'],
    39.4: ['G', 'offset_G'],
    43.9: ['B', 'offset_B'],
    47.4: ['C_First_Inv', 'offset_C_First_Inv'],
    51.2: ['B', 'offset_B'],
    55.0: ['A', 'offset_A'],
    58.8: ['G', 'offset_G'],
    62.6: ['G', 'offset_G'],
    66.4: ['G', 'offset_G'],
    70.2: ['G', 'offset_G'],
    74.0: ['B', 'offset_B'],
    78.5: ['C_First_Inv', 'offset_C_First_Inv'],
    82.3: ['B', 'offset_B'],
}

Star_Wars ={
    0.0: ['C_Root', 'offset_C_Root'],
    4.5: ['G', 'offset_G'],
    9.0: ['F', 'offset_F'],
    12.8: ['E', 'offset_E'],
    16.6: ['D', 'offset_D'],
    20.4: ['C_First_Inv', 'offset_C_First_Inv'],
    24.9: ['G', 'offset_G'],
    29.4: ['F', 'offset_F'],
    33.2: ['E', 'offset_E'],
    37.0: ['D', 'offset_D'],
    40.8: ['C_First_Inv', 'offset_C_First_Inv'],
    45.3: ['G', 'offset_G'],
    49.8: ['F', 'offset_F'],
    53.6: ['E', 'offset_E'],
    57.4: ['F', 'offset_F'],
    61.2: ['D', 'offset_D'],
    65.7: ['G', 'offset_G'],
    69.5: ['G', 'offset_G'],
    73.3: ['C_Root', 'offset_C_Root'],
    77.8: ['G', 'offset_G'],
    82.3: ['F', 'offset_F'],
    86.1: ['E', 'offset_E'],
    89.9: ['D', 'offset_D'],
    93.7: ['C_First_Inv', 'offset_C_First_Inv'],
    98.2: ['G', 'offset_G'],
    102.7: ['F', 'offset_F'],
    106.5: ['E', 'offset_E'],
    110.3: ['D', 'offset_D'],
    114.1: ['C_First_Inv', 'offset_C_First_Inv'],
    118.6: ['G', 'offset_G'],
    123.1: ['F', 'offset_F'],
    126.9: ['E', 'offset_E'],
    130.7: ['F', 'offset_F'],
    134.5: ['D', 'offset_D'],
}


# The loop below iterates through a dictionary storing the note to play
# as well as their duration. It calculates the time that has elapsed since
# the beginning fo the loop, and subtract it from teh note's duration
# if positive, wait for the new values of 'duration', then play the note

#get_ready("right_arm", r_pose1, r_pose2)
#get_ready("left_arm",  l_pose1, l_pose2)
'''
play_note("right_arm", C_FI, offset_C_FI)
play_note("right_arm", B, offset_B)
play_note("right_arm", A, offset_A)
play_note("right_arm", G, offset_G)

play_note("left_arm", C_R, offset_C_R)
play_note("left_arm", D, offset_D)
play_note("left_arm", E, offset_E)
play_note("left_arm", F, offset_F)

'''
### ------------- I can make this a function, so each songe can be easily played
start = time.time() #rospy.time()

for duration, note in Basket_Case.items(): # Basket_Case
    if note:
        duration -= (time.time() - start)
        if duration > 0:
            time.sleep(duration)
        if note[0] in ["C_First_Inv", "B", "A", "G"]:
            play_note('right_arm', Notes[note[0]], Notes[note[1]])
        else:
            play_note('left_arm', Notes[note[0]], Notes[note[1]])
            


end = time.time()
elapsed = end - start # Calculates the time the whole song took
print(elapsed)
go_home("right_arm", Home_r)
go_home("left_arm", Home_l)

#play_note('right_arm', Home, Home)
#play_note('left_arm', Home, Home)

#get_ready("right_arm", r_pose3, r_pose2, r_pose1)
#get_ready("right_arm", r_pose1, r_pose2, r_pose3)
#get_ready("left_arm",  l_pose1, l_pose2, l_pose3)
'''
play_note("right_arm", C_First_Inv, offset_C_First_Inv)
play_note("right_arm", B, offset_B)
play_note("right_arm", A, offset_A)
play_note("right_arm", G, offset_G)

play_note("left_arm", C_Root, offset_C_Root)
play_note("left_arm", D, offset_D)
play_note("left_arm", E, offset_E)
play_note("left_arm", F, offset_F)

go_home("right_arm", Home_r)
go_home("left_arm", Home_l)
'''
